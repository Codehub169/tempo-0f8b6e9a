// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String // Hashed password
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  reviews Review[]
  cart    Cart?    // A user can have one active cart
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[] // URLs to product images
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  categories ProductCategory[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products ProductCategory[]
}

// Join table for many-to-many relationship between Product and Category
model ProductCategory {
  productId  String
  categoryId String
  assignedAt DateTime @default(now())
  assignedBy String? // Optional: admin/user who assigned it

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // e.g., 1 to 5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Order {
  id        String   @id @default(cuid())
  status    String // e.g., PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELED
  total     Float
  shippingAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  items     OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  priceAtPurchase Float // Price of the product at the time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String   @unique // Each user has one cart
  user      User     @relation(fields: [userId], references: [id])

  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId]) // Ensures a product appears only once per cart, quantity is updated
  @@index([cartId])
  @@index([productId])
}
